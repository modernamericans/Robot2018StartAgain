package org.usfirst.frc6442.Robot2018StartAgain.subsystems;

import org.usfirst.frc6442.Robot2018StartAgain.Robot;
import org.usfirst.frc6442.Robot2018StartAgain.RobotMap;
import org.usfirst.frc6442.Robot2018StartAgain.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

public class DriveTrain extends PIDSubsystem {
	private final SpeedController driveLeft = RobotMap.driveCtrlLeft;
    private final SpeedController driveRight = RobotMap.driveCtrlRight;

    private static final double Kp = 3;
    private static final double Ki = 0.2;
    private static final double Kd = 0.1;

    // IDEA!!! Gyro drive, like playing a isomorphic game, left controller drives the robot and goes in absolute direction

    public DriveTrain() {
        super("DriveSystem", Kp, Ki, Kd);
    }

    @Override
    public void initDefaultCommand() {
       setDefaultCommand(new AnalogDrive());
    }
    
    public void tankDrive(double leftMagnitude, double rightMagnitude) {
    	set(leftMagnitude, rightMagnitude);
    }
    
    public void set(double left, double right) {
    	driveLeft.set(left);  	
    	driveRight.set(right);
    }
    
    public void set(double value) {
    	set(value * Robot.values.leftDriveFrac, value * Robot.values.rightDriveFrac);	
    }
    
    public void forwardFull() {
    	set(1);
    }    
    
    public void forwardHalf() {
    	set(0.5);
    }

    public void rightTurn(double speed) {
    	set(-speed, speed);
    }
    
    public void rightTurn() {
    	set(0.5);
    }
    
    public void leftTurn(double speed) {
    	set(speed,-speed);
    }

    public void leftTurn() {
    	leftTurn(0.5);
    }
    
    public void reverse() {
    	set(-0.5);
    }

    public void driveStraight(double speed) {
        drivingStraight = true;
        setSetpoint(RobotMap.gyro.getAngle());
    }
    
    public void stop() {
        drivingStraight = false;
    	set(0);
    }

    protected double returnPIDInput() {
        return RobotMap.gyro.getAngle();
    }
    
    protected void usePIDOutput(double output) { 
        set(0.5+output,0.5-output);
    }
    
    public void periodic() {

    }
}