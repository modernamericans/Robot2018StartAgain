// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6442.Robot2018StartAgain.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc6442.Robot2018StartAgain.RobotMap;
import org.usfirst.frc6442.Robot2018StartAgain.Robot;


/**
 *
 */
public class DriveCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {

    
    }
    

    // Called repeatedly when this Command is scheduled to run
    @Override
    //THIS IS THE ROBOT2018STARTAGAIN CODE//////////////////////////////////////////////////////
    protected void execute() {
    	
    	int mode = Robot.controllerMode;
    	
    	System.out.println(mode);
    	
		double left = Robot.oi.leftStickVertical(1);
		double right = Robot.oi.rightStickVertical(1);
		

    	if(mode == Robot.tankMode) {
//        	double right = Robot.oi.joystick.getRawAxis(5);
//        	double left = Robot.oi.joystick.getRawAxis(1);

    		Robot.driveTrain.joyDrive(right, left);	
//    	}else if(mode == Robot.t) {
//        	double triggerLeft = Robot.oi.joystick.getRawAxis(2);
//        	double triggerRight = Robot.oi.joystick.getRawAxis(3);
//        	Robot.driveTrain.joyDrive(triggerRight, triggerLeft);
    	}else if(mode == Robot.arcadeMode) {

//        	double joySpeed = Robot.oi.joystick.getRawAxis(1);
//        	double joySteer = Robot.oi.joystick.getRawAxis(4);
    		double joySpeed = left;
    		double joySteer = right;
    		
        	double steerStrength = joySteer * joySteer / 2;
        	double rightValue = 1;
        	double leftValue = 1;
        	
        	boolean steerRight = joySteer > 0;
        	boolean steerLeft = joySteer < 0;
        	
        if(steerRight) {
        rightValue = rightValue - steerStrength;	
        }
        if(steerLeft) {
        	leftValue = leftValue - steerStrength;	
        }
        rightValue = rightValue * joySpeed;
        leftValue = leftValue * joySpeed; 
       
    	
    	Robot.driveTrain.joyDrive(rightValue, leftValue);
    	
    	}
    	//4axis left is -, right is +. (steer)
    	

    		
    		
    	
    		
//		}
//		System.out.println(right + ", " + left);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    
    	
    
    
    }
    

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
