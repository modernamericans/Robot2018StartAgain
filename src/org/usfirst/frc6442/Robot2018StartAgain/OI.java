// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6442.Robot2018StartAgain;

import org.usfirst.frc6442.Robot2018StartAgain.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6442.Robot2018StartAgain.subsystems.*;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.Hand;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    
//    public JoystickButton buttonA;
//    public JoystickButton buttonB;
//    public JoystickButton buttonX;
//    public JoystickButton buttonY;
//    public JoystickButton buttonRB;
//    public JoystickButton buttonLB;
//    public JoystickButton buttonStart;
//    public JoystickButton buttonBack;
//    public JoystickButton buttonLS;
//    public JoystickButton buttonRS;
//    public Joystick joystick, joystickLaunch;
//    public JoystickButton buttonY2;
//    public JoystickButton buttonA2;
    
    public XboxController xbox = new XboxController(2);
    public XboxController xbox2 = new XboxController(3);
    
    
    public double rightStickVertical(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getY(Hand.kRight);
    }
    
    public double leftStickVertical(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getY(Hand.kLeft);
    }
    
    public double rightStickHorizontal(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getX(Hand.kRight);
    }
    
    public double leftStickHorizontal(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getX(Hand.kLeft);
    }
    
    public double rightTrigger(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getTriggerAxis(Hand.kRight);
    }
    
    public double leftTrigger(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getTriggerAxis(Hand.kLeft);
    }
    
    public boolean leftBumper(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getBumper(Hand.kLeft);
    }
    
    public boolean rightBumper(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getBumper(Hand.kRight);
    }
    
    public boolean buttonA(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getAButton();
    }
    
    public boolean buttonY(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getYButton();
    }
    
    public boolean buttonB(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getBButton();
    }
    
    public boolean buttonX(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	return controller.getXButton();
    }
    
	    public int dPad(int controllerNumber) {
    	
    	XboxController controller = xbox;
    	
//    	if(controllerNumber == 2) {
//    		controller = xbox2;
//    	}
    	int angle = controller.getPOV();
		
		if (angle == -1) return 0;
		if (angle > 337 || angle < 23) return 1;
		if (angle > 67 && angle < 113) return 2;
		if (angle > 157 && angle < 213) return 3;
		if (angle > 247 && angle < 293) return 4;
		
		
		return 0;
		
    }
	
	    public boolean dPadUp(int controllerNumber) {
    	int dPadValue = dPad(controllerNumber);
		
		if(dPadValue == 1) return true;
		else return false;
				
    }
	    public boolean dPadRight(int controllerNumber) {
    	int dPadValue = dPad(controllerNumber);
		
		if(dPadValue == 2) return true;
		else return false;
				
    }
	    public boolean dPadDown(int controllerNumber) {
    	int dPadValue = dPad(controllerNumber);
		
		if(dPadValue == 3) return true;
		else return false;
				
    }
	    public boolean dPadLeft(int controllerNumber) {
    	int dPadValue = dPad(controllerNumber);
		
		if(dPadValue == 4) return true;
		else return false;
				
    }

    public OI() {

//        joystick = new Joystick(2);
//        joystickLaunch = new Joystick(0);
//        
//        
//        dPadUpLaunch = new JoystickButton(joystickLaunch, 1);
//        
//        dPadDownLaunch = new JoystickButton(joystickLaunch, 2);
//        
//        buttonA = new JoystickButton(joystickLaunch, 2);
//        
//        buttonB = new JoystickButton(joystickLaunch, 3);
//         // dpad is being used to raise and lower the pneumatics system on a second controller. Also, A is going to
//        //be a set speed for launching into the switch and B is going to be a set speed to launch onto the scale. 
//       
//        buttonBack = new JoystickButton(joystick, 7);
//        
//        //buttonStart = new JoystickButton(joystick, 8);
//       
//        buttonLB = new JoystickButton(joystick, 5);
//        
//        buttonRB = new JoystickButton(joystick, 6);
//        
//        buttonY = new JoystickButton(joystick, 4);
//        
//        buttonX = new JoystickButton(joystick, 3);
//        
//        buttonB = new JoystickButton(joystick, 2);
//        
//        buttonA = new JoystickButton(joystick, 1);
//       //buttonA.whenPressed(new AutonomousCommand());
//       buttonLS = new JoystickButton(joystick, 9);
//       
//       buttonRS = new JoystickButton(joystick, 10);
       
       
       


//        // SmartDashboard Buttons
//        SmartDashboard.putData("LaunchCube", new LaunchCube());
//        SmartDashboard.putData("Secure", new Secure());
//        SmartDashboard.putData("Teleop Command", new TeleopCommand());
//        SmartDashboard.putData("DriveCommand", new DriveCommand());
//        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
//        SmartDashboard.putData("Grab", new Grab());
//        SmartDashboard.putData("Exchange", new Exchange());
//        SmartDashboard.putData("Push", new Push());
//        SmartDashboard.putData("Feed", new Feed());
//        SmartDashboard.putData("PrepLaunch", new PrepLaunch());
//        SmartDashboard.putData("LaunchDone", new LaunchDone());
//        SmartDashboard.putData("SecureCube", new SecureCube());
//        SmartDashboard.putData("ExchangeCube", new ExchangeCube());

    }

    //public Joystick getJoystick() {
        //return joystick;
    //}

}

