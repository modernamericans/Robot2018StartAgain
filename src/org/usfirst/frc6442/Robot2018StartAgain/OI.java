// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6442.Robot2018StartAgain;

import org.usfirst.frc6442.Robot2018StartAgain.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6442.Robot2018StartAgain.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton buttonA;
    public JoystickButton buttonB;
    public JoystickButton buttonX;
    public JoystickButton buttonY;
    public JoystickButton buttonRB;
    public JoystickButton buttonLB;
    public JoystickButton buttonStart;
    public JoystickButton buttonBack;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(0);
        
        buttonBack = new JoystickButton(joystick, 12);
        buttonBack.whenPressed(new AutonomousCommand());
        buttonStart = new JoystickButton(joystick, 13);
        buttonStart.whenPressed(new AutonomousCommand());
        buttonLB = new JoystickButton(joystick, 8);
        buttonLB.whenPressed(new AutonomousCommand());
        buttonRB = new JoystickButton(joystick, 9);
        buttonRB.whenPressed(new AutonomousCommand());
        buttonY = new JoystickButton(joystick, 7);
        buttonY.whenPressed(new AutonomousCommand());
        buttonX = new JoystickButton(joystick, 4);
        buttonX.whenPressed(new AutonomousCommand());
        buttonB = new JoystickButton(joystick, 6);
        buttonB.whenPressed(new AutonomousCommand());
        buttonA = new JoystickButton(joystick, 5);
        buttonA.whenPressed(new AutonomousCommand());


        // SmartDashboard Buttons
        SmartDashboard.putData("LaunchCube", new LaunchCube());
        SmartDashboard.putData("Secure", new Secure());
<<<<<<< HEAD
        SmartDashboard.putData("Teleop Command", new TeleopCommand());
=======
>>>>>>> master
        SmartDashboard.putData("DriveCommand", new DriveCommand());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Grab", new Grab());
        SmartDashboard.putData("Exchange", new Exchange());
        SmartDashboard.putData("Push", new Push());
        SmartDashboard.putData("Feed", new Feed());
        SmartDashboard.putData("PrepLaunch", new PrepLaunch());
        SmartDashboard.putData("LaunchDone", new LaunchDone());
        SmartDashboard.putData("SecureCube", new SecureCube());
        SmartDashboard.putData("ExchangeCube", new ExchangeCube());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

