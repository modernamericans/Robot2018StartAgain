// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6442.Robot2018StartAgain;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static SpeedController ctlDriveRight;
    public static SpeedController ctlDriveLeft;
    
    public static SpeedController ctlFeeder;
    public static SpeedController ctlLauncher;
    
    public static SpeedController ctlGrabRight;
    public static SpeedController ctlGrabLeft;
	
    public static Compressor compressor;
    public static DoubleSolenoid dblSolenoid;
    
    public static ADXRS450_Gyro gyro;
 
    public static void init() {
        compressor = new Compressor(0);
        
        dblSolenoid = new DoubleSolenoid(0, 1);
              
        ctlDriveRight = new Spark(1);
        ctlDriveRight.setInverted(true);
        
        ctlDriveLeft = new Spark(0);
        ctlDriveLeft.setInverted(false);
        
        ctlFeeder = new Spark(3);
        ctlFeeder.setInverted(false);
        
        ctlLauncher = new Spark(4);
        ctlLauncher.setInverted(false);
        
        ctlGrabRight = new Spark(7);
        ctlGrabRight.setInverted(false);
        
        ctlGrabLeft = new Spark(8);
        ctlGrabLeft.setInverted(false);
        
        gyro = new ADXRS450_Gyro();
    }
}
