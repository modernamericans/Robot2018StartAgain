// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6442.Robot2018StartAgain;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// Motors
    public static SpeedController driveCtrlRight;
    public static SpeedController driveCtrlLeft;
    public static SpeedControllerGroup driveCtrlBoth;
    
    public static SpeedController feedCtrl;
    public static SpeedController launchCtrl;
    
    public static SpeedController grabCtrlRight;
    public static SpeedController grabCtrlLeft;
    public static SpeedControllerGroup grabCtrlBoth;
    
    // Sensors
    public static Ultrasonic distSensor1;
    public static Ultrasonic distSensor2;
	public static ADXRS450_Gyro gyro;
	public static Accelerometer accel;
	
	// CAN Controlled
    public static Compressor pneumaticsCompressor;
    public static DoubleSolenoid pneumaticsDoubleSolenoid;
    
	public static PowerDistributionPanel powerDist;

    public static void init() {
    	if (!Robot.values.skipCAN) {
    		pneumaticsCompressor     = new Compressor();
	        pneumaticsDoubleSolenoid = new DoubleSolenoid(Robot.values.solenoidForward, Robot.values.solenoidReverse);
	        powerDist                = new PowerDistributionPanel();
	        
	        //double current = powerDist.getCurrent(1); //in amps
    	}
        
        
        driveCtrlRight = new Spark(Robot.values.rightDrivePWM);
        driveCtrlRight.setInverted(Robot.values.rightDriveInvert);
        driveCtrlLeft = new Spark(Robot.values.leftDrivePWM);
        driveCtrlLeft.setInverted(Robot.values.leftDriveInvert);
        driveCtrlBoth = new SpeedControllerGroup(driveCtrlRight, driveCtrlLeft);
        
        feedCtrl = new Spark(Robot.values.feederPWM);
        feedCtrl.setInverted(Robot.values.feederInvert);
        launchCtrl = new Spark(Robot.values.launcherPWM);
        launchCtrl.setInverted(Robot.values.launcherInvert);
        
        grabCtrlRight = new Spark(Robot.values.grabberRightPWM);
        grabCtrlRight.setInverted(Robot.values.grabberRightInvert);
        grabCtrlLeft = new Spark(Robot.values.grabberLeftPWM);
        grabCtrlLeft.setInverted(Robot.values.grabberLeftInvert);
        grabCtrlBoth = new SpeedControllerGroup(grabCtrlRight, grabCtrlLeft  );
		
		gyro = new ADXRS450_Gyro();
		accel = new BuiltInAccelerometer(); 
//		double xVal = accel.getX();
//		double yVal = accel.getY();
//		double zVal = accel.getZ();
		distSensor1 = new Ultrasonic(0, 1);
		distSensor1 = new Ultrasonic(2, 3);
    }
}
