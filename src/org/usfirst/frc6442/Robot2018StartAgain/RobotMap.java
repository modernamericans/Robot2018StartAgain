// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6442.Robot2018StartAgain;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Compressor pneumaticsCompressor1;
    public static Solenoid pneumaticsSolenoid1;
    public static Solenoid pneumaticsSolenoid2;
    public static DoubleSolenoid pneumaticsDoubleSolenoid;
    public static SpeedController driveTrainDriveRight;
    public static SpeedController driveTrainDriveLeft;
    public static SpeedControllerGroup driveTrainSpeedControllerGroup1;
    public static PowerDistributionPanel distributionPanelPowerDistributionPanel1;
    public static SpeedController launcherLaunchStage1;
    public static SpeedController launcherLaunchStage2;
    public static Ultrasonic distanceSensorUltrasonic1;
    public static SpeedController grabberGrabberR;
    public static SpeedController grabberGrabberL;
    public static SpeedControllerGroup grabberGrabbingGroup;
	public static ADXRS450_Gyro gyro;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       /* pneumaticsCompressor1 = new Compressor(0);
        pneumaticsDoubleSolenoid = new DoubleSolenoid(1, 2);
        pneumaticsSolenoid1 = new Solenoid(0, 0);
        pneumaticsSolenoid2 = new Solenoid(0, 3);
        distributionPanelPowerDistributionPanel1 = new PowerDistributionPanel(0);*/
        
        driveTrainDriveRight = new Spark(Robot.values.rightDrivePWM);
        driveTrainDriveRight.setInverted(Robot.values.rightDriveInvert);
        driveTrainDriveLeft = new Spark(Robot.values.leftDrivePWM);
        driveTrainDriveLeft.setInverted(Robot.values.leftDriveInvert);
        driveTrainSpeedControllerGroup1 = new SpeedControllerGroup(driveTrainDriveRight, driveTrainDriveLeft);
        
        launcherLaunchStage1 = new Spark(Robot.values.launcherStage1PWM);
        launcherLaunchStage1.setInverted(Robot.values.launcherStage1Invert);
        launcherLaunchStage2 = new Spark(Robot.values.launcherStage2PWM);
        launcherLaunchStage2.setInverted(Robot.values.launcherStage2Invert);
        
        grabberGrabberR = new Spark(Robot.values.grabberRPWM);
        grabberGrabberR.setInverted(Robot.values.grabberRInvert);
        grabberGrabberL = new Spark(Robot.values.grabberLPWM);
        grabberGrabberL.setInverted(Robot.values.grabberLInvert);
        grabberGrabbingGroup = new SpeedControllerGroup(grabberGrabberR, grabberGrabberL  );
		
		gyro = new ADXRS450_Gyro();
		distanceSensorUltrasonic1 = new Ultrasonic(0, 1);
		
		LiveWindow.addActuator("Pneumatics", "Compressor 1", pneumaticsCompressor1);
		LiveWindow.addActuator("Pneumatics", "Solenoid 1", pneumaticsSolenoid1);
		LiveWindow.addActuator("Pneumatics", "Solenoid 2", pneumaticsSolenoid2);
		
		LiveWindow.addActuator("DriveTrain", "Drive Right", (Spark) driveTrainDriveRight);
        LiveWindow.addActuator("DriveTrain", "Drive Left", (Spark) driveTrainDriveLeft); 
        LiveWindow.addActuator("DriveTrain", "Speed Controller Group 1", driveTrainSpeedControllerGroup1);
		
		LiveWindow.addSensor("DistributionPanel", "PowerDistributionPanel 1", distributionPanelPowerDistributionPanel1);
		
		LiveWindow.addActuator("Launcher", "Launch Stage 1", (Spark) launcherLaunchStage1);
		LiveWindow.addActuator("Launcher", "Launcher Stage 2", (Spark) launcherLaunchStage2);
		
		LiveWindow.addActuator("Grabber", "GrabberR", (Spark) grabberGrabberR);
		LiveWindow.addActuator("Grabber", "GrabberL", (Spark) grabberGrabberL);
		LiveWindow.addActuator("Grabber", "Grabbing Group", grabberGrabbingGroup);
		
		LiveWindow.addSensor("DistanceSensor", "Ultrasonic 1", distanceSensorUltrasonic1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
