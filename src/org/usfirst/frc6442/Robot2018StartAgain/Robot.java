// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//THIS IS THE ROBOT2018STARTAGAIN CODE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

package org.usfirst.frc6442.Robot2018StartAgain;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc6442.Robot2018StartAgain.commands.*;
import org.usfirst.frc6442.Robot2018StartAgain.subsystems.*;
import edu.wpi.first.wpilibj.Preferences;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    Command driveCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Pneumatics pneumatics;
    public static DriveTrain driveTrain;
    public static DistributionPanel distributionPanel;
    public static Launcher launcher;
    public static DistanceSensor distanceSensor;
    public static Grabber grabber;
    
    public static int controllerMode = 0;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pneumatics = new Pneumatics();
        driveTrain = new DriveTrain();
        distributionPanel = new DistributionPanel();
        launcher = new Launcher();
        distanceSensor = new DistanceSensor();
        grabber = new Grabber();
        
       
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        System.out.println("Init Done");
        System.out.println("Init Done");
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
       
String gameData;
		
		gameData = DriverStation.getInstance().getGameSpecificMessage();
		//System.out.println(gameData.charAt(0) + gameData.charAt(1) + gameData.charAt(2));
		if(gameData.charAt(0) == 'L')
		{
			System.out.println("Near is Left"); //Near Switch
			//Put left auto code here
		} else if(gameData.charAt(0) == 'R') {
			System.out.println("Near is Right");
			//Put right auto code here
		}
		
		if(gameData.charAt(1) == 'L')
		{
			System.out.println("Scale is Left"); //Scale
			//Put left auto code here
		} else if(gameData.charAt(1) == 'R') {
			System.out.println("Scale is Right");
			//Put right auto code here
		}
		
		if(gameData.charAt(2) == 'L')
		{
			System.out.println("Opposing is Left"); // Opposite Switch
			//Put left auto code here
		} else if(gameData.charAt(2) == 'R') {
			System.out.println("Opposing is Right");
			//Put right auto code here
		}
        
        if (autonomousCommand != null) autonomousCommand.start();
        if (driveCommand != null) driveCommand.cancel();//?
    }
    

    /**
     * 
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        driveCommand = chooser.getSelected();//?
        if(driveCommand != null) driveCommand.start();//?
        System.out.println("I am working");
        
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
